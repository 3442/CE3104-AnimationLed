procedure main(){

	var = 5;  ##esto es un comentario
	
	x , y = 10 ,14 ;
	
	hola  = false; 
	
	boolean = false;
	
	numero = 5 + 7 ;
	
	float = 1;
	
	var  = true; 
	
	## !!!!! algo pasa con type(var);
	
	connum12 = 11;
	
	con@var =  true;
	
	es_hoy? = 15 * 12; 
	
	dos2 , tres3 = 3 , 2;  
	
	lista = [];
	
	L = [true , false , false];
	
	final = L[2];
	
	sub_L = L[0:1];
	
	 ##prbRange = range(5, True);
	
	prbRange.delete(2);
	
	largo  = len(sub_L);
	
	L[0].neg();
	
	Blink(1,8,2,"seg",True);
	
	Delay(15 , "mil");
	
	call one_by_one();
}
procedure operations(num: int){

	x = num + 10;
	z  = num - 15;

} 

Procedure one_by_one(){

	PrintLed(1,1,true);
	
	ListaX = [True, True, False, False, False, False, True, False];   ##soy un cometario

	printLedX("F", 2, ListaX);
	
	PRINTLEDX( "C", 5, ListaX);
	
	x = [True, True, False, False, False, False, True, True, True, True,False];
	
	##soy otro comentario
	
	for var1 IN x Step 2 {
		
		x[var1].Neg();

		}
	For var1 in milista[1:3] {
	
		x[var1].Neg();
		
		}

	for var1 in 10
		{
		## Se ejecutará el cuerpo del FOR 10 veces, inicializando en la
		## primera iteración a la variable local “var1” con el valor de 0.
		}
		
	m=[[True,False,True],[True, True, True],[False,False,True]];
	
	
	una_fila = M[0];
	
	un_bool = m[1][1];
	
	otro_bool = M[1,1]; ## Elemento en la fila 1 y columna 1
	cosaaa = M[:,1] ;## Columna en el índice 1
	
	## !!!!! algo pasa con filas = M.shapeF();                ## Devuelve el numero de Filas que posee la matriz
	## !!!!! algo pasa con columnas = M.shapeC    ## Devuelve el numero de Columnas que posee la matriz


	M.insert([[True, False, True]], 0);
	
	M.insert([[True, False, True]], 0,0);
	
	
	matriz2 = [[True , True , True ],
			[True , True , True ],
			[False , False ,False]];
			
			

	matriz2.delete(0,0);
	
	
	for i in filas
	{
		for j in columnas
		{
			Matriz2[i, j].Neg;
		}
	}
	
	MIVARIABLE  =  5; 
	
	If MiVariable == 5
	{
		## Escribir el cuerpo del IF
	}
	
	If M[:, 1] == True
	{
	
	}
	
	call opetations();
	
	call operations(10);

}

PROCEDURE operations() {

	x = 1;
	
	y = 1;
	
	z = x + y;
	
	a = z  - 1;
	
	n = 2;
	
	n = n +1; 
	
	uno = 1//1;
	
	dos = 2 / 1;
	
	b = 10 / 2; 

}

Procedure more (a: type(2 + 3)){}




