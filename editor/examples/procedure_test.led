##Cada uno de los grupos deberá traer el código suficiente y
##el dispositivo necesario para presentar una de las
##animaciones presentadas al inicio del presente documento.

##Cada uno de los grupos deberá traer el código suficiente y
##el dispositivo necesario para hacer una animación donde
##pueda demostrar a completitud todas las bondades del
##proyecto realizado.

##El profesor llevará a la revisión un requerimiento tipo
##“letrero” que deberá generar animación (letras pasando
##lentamente por el dispositivo).
##El grupo deberá generar
##el código suficiente y necesario para realizar dicha
##animación.

procedure main(){

	##global rows;
	
	##global cols;
	
	rows , cols = 8,8;
	
	call dance();
	
	delay(5,"seg");
	
	call stick_man(30,900);
	
	call off();
	
}

procedure dance(){

	call off();
	
	call one_by_one(true,500);
	
	call one_by_one(true,250);
	
	call one_by_one(true,50);
	
	delay(200,"mil");
	
	call desc_to_m(true,false,400,50);
	
	call desc_frm_m(true,false,400,50);
	
	delay(200,"mil");
	
	call desc_to_m(true,true,400,50);
	
	call desc_frm_m(true,true,400,50);
	
	delay(200,"mil");
	
	call desc_to_m(true,false,100,500);
	
	call desc_frm_m(true,false,100,500);
	
	delay(200,"mil");
	
	call desc_to_m(false,true,100,500);
	
	call desc_frm_m(false,true,100,500);
	
	delay(2,"seg");
	
	call off();
	
	call anim(10,500);	

}

procedure OFF(){

	off_mat =    [ [false,false,false,false,false,false,false,false],
	
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false] ];
	
	printledX("M",0,off_mat);
}

procedure ON(){

	on_mat =    [ [true,true,true,true,true,true,true,true],
	
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true] ];
	
	printledX("M",0,on_mat);
}

## Enciende todos los leds, uno por uno, por filas
procedure one_by_one(keep_OFF: bool,speed:int){

	call off();
	
	for i in rows {
		
		for j in cols {
			
			printLed(i,j,true);
			
			delay(speed,"mil");
			
			if keep_off {
				printLed(i,j,false);
			}
		}
	
	}
	
}

## Un hombrecito de palo da cantidad de saltos igual a  "jumps" 
## a una velocidad de "speed" mili segundos
procedure stick_man(jumps:int, speed:int){
	
	call off();
	
	down =          [ [false,false,false,true,true,true,false,false],
	
				 [false,false,false,true,true,true,false,false],
				 
				 [false,false,false,true,true,true,false,false],
				 
				 [false,false,false,false,true,false,false,false],
				 
				 [false,false,false,true,true,true,false,false],
				 
				 [false,false,true,false,true,false,true,false],
				 
				 [false,false,false,false,true,false,false,false],
				 
				 [false,false,false,true,false,true,false,false] ];
				 
				 
	up =              [ [false,false,false,true,true,true,false,false],
	
				 [false,false,false,true,true,true,false,false],
				 
				 [false,true,false,true,true,true,false,true],
				 
				 [false,false,true,false,true,false,true,false],
				 
				 [false,false,false,true,true,true,false,false],
				 
				 [false,false,false,false,true,false,false,false],
				 
				 [false,false,false,true,false,true,false,false],
				 
				 [false,false,true,false,false,false,true,false] ];
	
	for i in jumps{
		
			printledX("M",0,down);
			
			delay(speed,"mil");
			
			printledX("M",0,up);
			
			delay(speed,"mil");
			
			call off();
			
	}

}


##Descendent to middle
##Enciende las diagonales descendentes empezando desde las
##esquinas. 
## Si top es true --> Enciende de la esquina SD al medio
##Si top es false --> Enciende de la esquina IZ al medio
##Speed: velocidad del delay en ms
procedure desc_to_m(keep_OFF:bool , top:bool, line_speed: int ,ind_speed:int ){

	this_row = rows-1;
		
	for i in rows {
		
		for j in i+1{
			
			row = this_row+j;
			col   = j;
				
			if top{
					
				tmp = row;
				row = col;
				col = tmp;
					
			}
				
			printLed(row,col,true) ; 
				
			delay(ind_speed,"mil");
				
			if keep_OFF {
				
				printLed(row,col,false); 
						
			}
				
		}
			
		this_row = this_row-1;
		
		delay(line_speed,"mil");
			
	}

}
	
##Descendent from middle
##Enciende las diagonales descendentes empezando desde la
##mitad de la matriz. 
## Si top es true --> Enciende del medio a la esquina IZ 
##Si top es false --> Enciende del medio a la esquina SD
procedure desc_frm_m(keep_OFF:bool,top:bool,line_speed: int ,ind_speed:int){

	this_col = 0;
	
	for i in rows {
	
		for j in 8- i {
		
			row = j;
			col   = this_col+j;
			
			if top {
					
				tmp = row;
				row = col;
				col = tmp;
					
			}
			
			printLed(row,col,true);  
			
			delay(ind_speed,"mil");
				
			if keep_OFF{
				
				printLed(row,col,false); 
						
			}
		
		}
		
		this_col = this_col +1;
		
		delay(line_speed,"mil");
	
	}
	
}


Procedure anim(cycles:int ,speed:int){
	
	for i in cycles{
	
		frame1   =    [ [true,false,false,false,false,false,false,false],
		
					 [true,true,false,false,false,false,false,false],
					 
					 [true,true,true,false,false,false,false,false],
					 
					 [true,true,true,true,false,false,false,false],
					 
					 [true,true,true,true,true,false,false,false],
					 
					 [true,true,true,true,true,true,false,false],
					 
					 [true,true,true,true,true,true,true,false],
					 
					 [true,true,true,true,true,true,true,true] ];
					 
					 ##---------------------------------------------------------------
					 
		frame2 =      [ [true,true,true,true,true,true,true,true],
		
					 [true,true,true,true,true,true,true,false],
					 
					 [true,true,true,true,true,true,false,false],
					 
					 [true,true,true,true,true,false,false,false],
					 
					 [true,true,true,true,false,false,false,false],
					 
					 [true,true,true,false,false,false,false,false],
					 
					 [true,true,false,false,false,false,false,false],
					 
					 [true,false,false,false,false,false,false,false] ];
	
		printledX("M",0,frame1);
		
		delay(speed,"mil");
		
		printledX("M",0,frame2);
		
		delay(speed,"mil");
		
		for r in rows{
		
			for c in cols{
			
				frame1[f,c].Neg();
				
				frame2[f][c].Neg();
				
				if r == c {
					
					frame1[f,c]  = true;
				
					frame2[f][c] = true;	
					
				}
			
			}
		
		}
		
		printledX("M",0,frame1);
		
		delay(speed,"mil");
		
		printledX("M",0,frame2);
		
		delay(speed,"mil");
		
	}
	
	
}




