procedure main(){

	
	rows , cols = 8,8;
	matrix = mat();
	for i in 2{
		  call sign([
				    [true,true,true,false,false,false,false,true,false,false,false,true,false,false,false,true,false,true,true,true,false,false,true,true,true,false,true,false,true],

				    [true,false,false,true,false,false,true,false,true,false,false,true,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true],

				    [true,false,false,true,false,true,false,false,false,true,false,true,true,false,false,true,false,false,true,false,false,true,false,false,false,false,true,false,true],

				    [true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,false,true,false,true],

				    [true,true,true,false,false,true,true,true,true,true,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,false,true,false,true],

				    [true,false,false,false,false,true,false,false,false,true,false,true,false,false,true,true,false,false,true,false,false,true,false,false,false,false,true,false,true],

				    [true,false,false,false,false,true,false,false,false,true,false,true,false,false,true,true,false,false,true,false,false,true,false,false,true,false,false,false,false],

				    [true,false,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,true,true,false,false,true,true,true,false,true,false,true]
				    ]
				    );
	  }
	call stick_man(10,500);
	delay(1,"seg");
	
	call dance();
	
	delay(1,"seg");
	
	
	
	call off();
	
	call hour_glass(5, false);
	call off();
	delay(1,"seg");
	
	call print_fila();
	delay(1,"seg");
	call off();
	
	call off();
	call print_led();
	delay(1,"seg");
	call list_test([true,true,true,true,true,true,true,true]);
	delay(1,"seg");
	call print_mat([
	[false,false,true,true,true,true,false,false],
	[false,true,false,false,false,false,true,false],
	[true,false,true,false,false,true,false,true],
	[true,false,false,false,false,false,false,true],
	[true,false,false,true,true,false,false,true],
	[true,false,false,false,false,false,false,true],
	[false,true,false,false,false,false,true,false],
	[false,false,true,true,true,true,false,false]		
	]);
	delay(1,"seg");
	call blink_test();
	call off();
	
}

procedure dance(){
call desc_to_m(true,false,200,50);
	
	call desc_frm_m(true,false,200,50);
	
	call desc_to_m(true,true,200,50);
	
	call desc_frm_m(true,true,200,50);
	
	delay(200,"mil");
	
	call desc_to_m(true,false,10,50);
	
	call desc_frm_m(true,false,10,50);
	
	delay(200,"mil");
	
	call desc_to_m(false,true,400,1);
	
	call desc_frm_m(false,true,400,1);
	
	delay(2,"seg");
	
	call anim(5,500);
	
	call anim(5,100);

		

}

procedure off(){

	off_mat =         [ [false,false,false,false,false,false,false,false],
	
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false],
				 
				 [false,false,false,false,false,false,false,false] ];
	
	printledX("M",0,off_mat);
}

procedure on(){

	on_mat =         [ [true,true,true,true,true,true,true,true],
	
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true],
				 
				 [true,true,true,true,true,true,true,true] ];
	
	printledX("M",0,on_mat);
}

## Enciende todos los leds, uno por uno, por filas
procedure one_by_one(keep_OFF: bool,speed:int){

	call off();
	
	for i in rows {
		
		for j in cols {
			
			printLed(i,j,true);
			
			delay(speed,"mil");
			
			if keep_off {
				printLed(i,j,false);
			}
		}
	
	}
	
}

## Un hombrecito de palo da cantidad de saltos igual a  "jumps" 
## a una velocidad de "speed" mili segundos
procedure stick_man(jumps:int, speed:int){
	
	call off();
	
	down =            [ [false,false,false,true,true,true,false,false],
	
				 [false,false,false,true,true,true,false,false],
				 
				 [false,false,false,true,true,true,false,false],
				 
				 [false,false,false,false,true,false,false,false],
				 
				 [false,false,false,true,true,true,false,false],
				 
				 [false,false,true,false,true,false,true,false],
				 
				 [false,false,false,false,true,false,false,false],
				 
				 [false,false,false,true,false,true,false,false] ];
				 
				 
	up =                [ [false,false,false,true,true,true,false,false],
	
				 [false,false,false,true,true,true,false,false],
				 
				 [false,true,false,true,true,true,false,true],
				 
				 [false,false,true,false,true,false,true,false],
				 
				 [false,false,false,true,true,true,false,false],
				 
				 [false,false,false,false,true,false,false,false],
				 
				 [false,false,false,true,false,true,false,false],
				 
				 [false,false,true,false,false,false,true,false] ];
	
	for i in jumps{
		
			printledX("M",0,down);
			
			delay(speed,"mil");
			
			printledX("M",0,up);
			
			delay(speed,"mil");
			
			call off();
			
	}

}


##Descendent to middle
##Enciende las diagonales descendentes empezando desde las
##esquinas. 
## Si top es true --> Enciende de la esquina SD al medio
##Si top es false --> Enciende de la esquina IZ al medio
##Speed: velocidad del delay en ms
procedure desc_to_m(keep_OFF:bool , top:bool, line_speed: int ,ind_speed:int ){

	this_row = rows-1;
		
	for i in rows {
		
		for j in i+1{
			
			row = this_row+j;
			col   = j;
				
			if top{
					
				tmp = row;
				row = col;
				col = tmp;
					
			}
				
			printLed(row,col,true) ; 
				
			delay(ind_speed,"mil");
				
			if keep_OFF {
				
				printLed(row,col,false); 
						
			}
				
		}
			
		this_row = this_row-1;
		
		delay(line_speed,"mil");
			
	}

}
	
##Descendent from middle
##Enciende las diagonales descendentes empezando desde la
##mitad de la matriz. 
## Si top es true --> Enciende del medio a la esquina IZ 
##Si top es false --> Enciende del medio a la esquina SD
procedure desc_frm_m(keep_OFF:bool,top:bool,line_speed: int ,ind_speed:int){

	this_col = 0;
	
	for i in rows {
	
		for j in 8- i {
		
			row = j;
			col   = this_col+j;
			
			if top {
					
				tmp = row;
				row = col;
				col = tmp;
					
			}
			
			printLed(row,col,true);  
			
			delay(ind_speed,"mil");
				
			if keep_OFF{
				
				printLed(row,col,false); 
						
			}
		
		}
		
		this_col = this_col +1;
		
		delay(line_speed,"mil");
	
	}
	
}


Procedure anim(cycles:int ,speed:int){
	
	for i in cycles{
	
		frame1   =    [    [true,false,false,false,false,false,false,false],
		
					 [true,true,false,false,false,false,false,false],
					 
					 [true,true,true,false,false,false,false,false],
					 
					 [true,true,true,true,false,false,false,false],
					 
					 [true,true,true,true,true,false,false,false],
					 
					 [true,true,true,true,true,true,false,false],
					 
					 [true,true,true,true,true,true,true,false],
					 
					 [true,true,true,true,true,true,true,true] ];
					 
					 ##---------------------------------------------------------------
					 
		frame2 =      [    [true,true,true,true,true,true,true,true],
		
					 [true,true,true,true,true,true,true,false],
					 
					 [true,true,true,true,true,true,false,false],
					 
					 [true,true,true,true,true,false,false,false],
					 
					 [true,true,true,true,false,false,false,false],
					 
					 [true,true,true,false,false,false,false,false],
					 
					 [true,true,false,false,false,false,false,false],
					 
					 [true,false,false,false,false,false,false,false] ];
	
		printledX("M",0,frame1);
		
		delay(speed,"mil");
		
		printledX("M",0,frame2);
		
		delay(speed,"mil");
		
		for r in rows{
		
			for c in cols{
			
				frame1[r,c].neg();
				
				frame2[r][c].neg();
				
				if r == c {
					
					frame1[r,c].t();
					
				}
				if (7 - r ) == c {

				    frame2[r][c] = true;

				}
			
			}
		
		}
		
		printledX("M",0,frame1);
		
		delay(speed,"mil");
		
		printledX("M",0,frame2);
		
		delay(speed,"mil");
		
	}
	
	
}

procedure hour_glass(times : type(11) , slice : type(false)){

	for n in times{

		matrix.insert([[true,true,true,true,true,true,true,true]],0);
		
		
		matrix.insert([[false,true,true,true,true,true,true,false]],0,0);
		
		
		matrix.insert([[false,false,true,true,true,true,false,false]],0,0);
		
		
		matrix.insert([[false,false,false,true,true,false,false,false]],0,0);
		
		
		matrix.insert([[false,false,false,true,true,false,false,false]],0,0);
		
		
		matrix.insert([[false,false,true,true,true,true,false,false]],0,0);
		
		
		matrix.insert([[false,true,true,true,true,true,true,false]],0,0);
		
		
		matrix.insert([[true,true,true,true,true,true,true,true]],0,0);
		
	}
	
	if slice {
	
		for num in matrix.shapeF step 2 {
		
			matrix.delete(0,0);
		
		}
	}
	
	for i in matrix.shapeF{
	
		for n in 8 {
		
			
			
			if i < matrix.shapeF-7{
			
				printledX("F",n,matrix[i+n]);
			
			}
		
		}
		delay(150,"mil");
	
	}
	
}

procedure print_mat(m: mat)
{
	printledx("M", 0,m);
}

##range, delay,for, printledx("F"...
procedure print_fila()
{
	for i in 8
	{
		printledx("F", i, range(i, true));
		delay(100,"mil") ;
	
	}
	delay(500,"mil") ;
	for i in 8
	{
		printledx("F", i, range(i, false));
		delay(100,"mil") ;
	
	}
}
procedure print_led()
{
	for i in 8
	{
		for j in 8
		{
			printled(i,j,True);
			delay(50,"mil") ;
		}
	}
	for i in 8
	{
		for j in 8
		{
			printled(j,i,false);
			delay(50,"mil") ;
		}
	}
	
	
}
procedure list_test(l:list)
{
	printledx("F", 0, l);
	delay(1000,"mil") ;
	l[0].t;
	printledx("F", 0, l);
	delay(1000,"mil") ;
	l[0].f;
	printledx("F", 0, l);
	delay(1000,"mil") ;
	l[0].t;
	printledx("F", 0, l);
	delay(1000,"mil") ;
	l.insert(1,false);
	printledx("F", 0, l);
	delay(1000,"mil") ;
	l.delete(0);
	printledx("F", 0,l);
	delay(1000,"mil") ;
	printledx("F", 0, l[0:5]);
	delay(1000,"mil") ;
	for i in len(l)
	{
		printled(i,4,True);
	}
	
}
procedure blink_test()
{
	blink(2,2,100,"mil",True);
	blink(5,2,100,"mil",True);
	blink(3,4,50,"mil",True);
	blink(4,4,50,"mil",True);
	delay(1,"seg") ;
	blink(3,4,50,"mil",false);
	blink(4,4,50,"mil",false);
	delay(5,"seg") ;
	blink(2,2,100,"mil",false);
	blink(5,2,100,"mil",false);
}

procedure sign(m: mat) {
for j in 8
{
	m.insert([[false,false,false,false,false,false,false,false]],1);
	m.insert([[false,false,false,false,false,false,false,false]],1,0);
}
for i in m.shapeC{
	for n in 7
	{
		
		if i <m.shapeC-7
		{
		printledX("C", n, m[:,i+n]);
		}
	  	
	  	
  	}
  	delay(300,"mil");
  
  }
}
