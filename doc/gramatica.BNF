<az> -> a | b | c | ... | x | y | z

<AZ> -> A | B | C | ... | X | Y | Z

<number> -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<Symbol> -> ? | _ | @

<String> -> <az><String> | <AZ><String> | <Symbol><String>
	| <number><String> | epsilon 

<Identifier> -> <az><String> 

<Type> -> Int | Bool | List | Mat | Type(<Expr>)

<TimeUnit> -> "mil" | "seg" | "min"

<ObjectKind> -> "c" | "f" | "m"

<BinOp> -> + | - | * | ** | / | % | // | == | <> | < | <= | > | >=

<Index> -> [<Expr>] | [<Expr>, <Expr>] | [<Expr>:<Expr>] | [:, <Expr>]   

<Indices> -> <Index> | <Index><Indices>

<Target> -> <Identifier><Indices>

<Targets> -> <Identifier><Indices> | <Identifier><Indices>,<Targets>

<Parameter> -> <Identifier>:<Type>

<Parameters> -> <Paramenter>,<Parameters> | <Parameter>

<Integer> -> <number> | <number><Integer>

<Read> -> <Identifier> | <Identifier><Indices>

<Attr> ->  <Expr>.Identifier

<Len> -> Len(<Expr>)

<Range> -> Range(<Expr>,<Expr>)

<List> -> [<Values>]

<Negate> -> -<Expr>

<Binary> -> (<Expr> <BinOp> <Expr>) | <Expr> <BinOP> <Expr>

<Expr> -> True | False | <Integer> | <Read> | <Attr> | <Len>
	| <Range> | <List> | <Negate> | <Binary> 

<Values> -> <Expr> | <Expr>,<Values>

<Arguments> -> <Expr> | <Expr>,<Arguments>

<If> -> if <Expr> { <Statements> }

<For> -> for <Identifier> in <Expr> { <Statements> }

<UserCall> -> call <Identifier>(<Arguments>); | call <Identifier>();

<GlobalLift> -> global <Identifier>;

<Assignment> -> <Targets> = <Values>;

<MethodCall> -> <Target>.<Identifier>(<Arguments>); | <Target>.<Identifier>();

<Blink> -> blink(<Expr>,<Expr>,<Expr>,<TimeUnit>,<Expr>);

<Delay> -> delay(<Expr>,<TimeUnit>);

<PrintLed> -> PrintLed(<Expr>,<Expr>,<Expr>);

<PrintLedX> -> PrintLedX(<ObjectKind>,<Expr>,<Expr>);

<Statement> -> <If> | <For> | <UserCall> | <GlobalLift> | <Assignment> | <MethodCall>
	| <Blink> | <Delay> | <PrintLed> | <PrintLedX> | epsilon

<Statements> -> <Statement><Statements> | <Statement>

<Procedure> -> procedure <Identifier>(<Parameters>){<statements>}
	| procedure <Identifier>(){<statements>} | epsilon

<Procedures> -> <Procedure><Procedures> | <Procedure>

<Program> -> <Procedures>