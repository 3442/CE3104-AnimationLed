<az> -> a | b | c | ... | x | y | z
<AZ> -> A | B | C | ... | X | Y | Z
<number> -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<Symbol> -> ? | _ | @
<String> -> <az><String> | <AZ><String> | <Symbol><String>
	| <number><String> | epsilon 
<Identifier> -> <az><String> 
<Type> -> Int | Bool | List | Mat | Type(<Expr>)
<TimeUnit> -> "mil" | "seg" | "min"
<ObjectKind> -> "c" | "f" | "m"
<BinOp> ->  ** | * | / | // | % | + | - | == | <> | < | <= | > | >=
<Index> -> [<Expr>] | [<Expr>, <Expr>] | [<Expr>:<Expr>] | [:, <Expr>]   
<Indices> -> <Index> | <Index><Indices> | epsilon 
<Target> -> <Identifier><Indices>
<Targets> -> <Identifier><Indices> | <Identifier><Indices>,<Targets>
<Parameter> -> <Identifier>:<Type>
<Parameters> -> <Paramenter>,<Parameters> | <Parameter>
<Integer> -> <number> | <number><Integer>
<Read> -> <Identifier><Indices>
<Attr> ->  <Expr>.<Identifier>
<Len> -> Len(<Expr>)
<Range> -> Range(<Expr>,<Expr>)
<List> -> [<Values>] | []
<Negate> -> -<Expr>
<Binary> -> <Expr> <BinOP> <Expr>
<Expr> -> <Expression> | (<Expr>)
<Expression> -> True | False | <Integer> | <Read> | <Attr> | <Len> | <Range>
	| <List> | <Negate> | <Binary> 
<Values> -> <Expr> | <Expr>,<Values> 
<Arguments> -> <Expr> | <Expr>,<Arguments>
<If> -> if <Expr> { <Statements> }
<For> -> for <Identifier> in <Expr> { <Statements> }
<UserCall> -> call <Identifier>(<Arguments>); | call <Identifier>();
<GlobalLift> -> global <Identifier>;
<Assignment> -> <Targets> = <Values>;
<MethodCall> -> <Target>.<Identifier>(<Arguments>);
	| <Target>.<Identifier>(); | <Target>.<Identifier>;
<Blink> -> Blink(<Expr>,<Expr>,<Expr>,<TimeUnit>,<Expr>);
<Delay> -> Delay(<Expr>,<TimeUnit>);
<PrintLed> -> PrintLed(<Expr>,<Expr>,<Expr>);
<PrintLedX> -> PrintLedX(<ObjectKind>,<Expr>,<Expr>);
<Statement> -> <If> | <For> | <UserCall> | <GlobalLift> | <Assignment>
	| <MethodCall> | <Blink> | <Delay> | <PrintLed> | <PrintLedX>
<Statements> -> <Statement><Statements> | <Statement> | epsilon
<Procedure> -> procedure <Identifier>(<Parameters>){<statements>}
	| procedure <Identifier>(){<statements>} 
<Procedures> -> <Procedure><Procedures> | <Procedure> | epsilon
<Program> -> <Procedures>